name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    name: Build, Lint, Test (frontend)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (fresh, ignore lock)
        run: |
          rm -f package-lock.json
          rm -rf node_modules
          npm install

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Unit tests
        run: npm run test:unit -- --run
        env:
          CI: true

      - name: Upload production build artifact
        if: ${{ matrix.node-version == '22.x' }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  backend:
    name: Lint, Type-Check, Build, Test (backend)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci || (echo "npm ci failed, falling back to fresh install" && rm -f package-lock.json && rm -rf node_modules && npm install)
          else
            npm install
          fi

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Unit tests
        run: npm test -- --runInBand
        env:
          CI: true

  deploy:
    name: Deploy to GitHub Pages (frontend)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, backend]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Add SPA fallback (404.html)
        run: |
          cp dist/index.html dist/404.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
